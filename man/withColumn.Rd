% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/DataFrame.R, R/generics.R
\docType{methods}
\name{withColumn,DataFrame,character,Column-method}
\alias{mutate}
\alias{mutate,DataFrame-method}
\alias{withColumn}
\alias{withColumn,DataFrame,character,Column-method}
\title{WithColumn}
\usage{
\S4method{withColumn}{DataFrame,character,Column}(x, colName, col)

\S4method{mutate}{DataFrame}(x, ...)

mutate(x, ...)

withColumn(x, colName, col)
}
\arguments{
\item{x}{A DataFrame}

\item{colName}{A string containing the name of the new column.}

\item{col}{A Column expression.}

\item{x}{A DataFrame}

\item{col}{a named argument of the form name = col}
}
\value{
A DataFrame with the new column added.

A new DataFrame with the new columns added.
}
\description{
Return a new DataFrame with the specified column added.

Return a new DataFrame with the specified columns added.
}
\examples{
\dontrun{
sc <- sparkR.init()
sqlContext <- sparkRSQL.init(sc)
path <- "path/to/file.json"
df <- jsonFile(sqlContext, path)
newDF <- withColumn(df, "newCol", df$col1 * 5)
}
\dontrun{
sc <- sparkR.init()
sqlContext <- sparkRSQL.init(sc)
path <- "path/to/file.json"
df <- jsonFile(sqlContext, path)
newDF <- mutate(df, newCol = df$col1 * 5, newCol2 = df$col1 * 2)
names(newDF) # Will contain newCol, newCol2
}
}

